{"version":3,"sources":["components/Input.js","components/LoanAmountInput.js","components/InterestRateInput.js","components/LoanLengthInput.js","components/PayoffDateInput.js","components/AmortizationTable.js","components/HeaderInformation.js","components/LoanForm.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","title","errorMessage","id","loanRegex","RegExp","LoanAmountInput","value","setValue","principalProps","placeholder","type","onChange","e","target","interestRateRegex","InterestRateInput","loanLengthRegex","LoanLengthInput","PayoffDateInput","AmortizationTable","amortizationSchedule","finishOnPaymentNumber","savedInterest","numberFormat","Intl","NumberFormat","style","currency","className","Object","keys","length","format","map","month","index","startingBalance","repayment","interestPaid","principalPaid","newBalance","key","Number","HeaderInformation","Fragment","LoanForm","useState","loanAmount","setLoanAmount","undefined","loanErrorMessage","setLoanErrorMessage","loanInterestRate","setLoanInterestRate","interestRateErrorMessage","setInterestRateErrorMessage","loanLength","setLoanLength","loanLengthErrorMessage","setLoanLengthErrorMessage","startOfToday","payoffDate","setPayoffDate","payoffDateErrorMessage","setPayoffDateErrorMessage","setFinishOnPaymentNumber","setAmortizationSchedule","setSavedInterest","validateForm","setErrorMessage","test","validateInterestRate","validateLoanLength","validatePayoffDate","tableProps","loanAmountProps","interestRateProps","loanLengthProps","payoffDateProps","role","onClick","payOffDate","convertedRate","firstInterestAmount","Math","round","convertedWithLoan","pow","monthlyPayment","fullyPaidOffDate","addMonths","paymentIndex","differenceInMonths","Date","loanTable","currentSavedInterest","i","loanBalance","interestPayment","roundedInterest","createAmortizationSchedule","String","App","basename","process","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4e4355ee.chunk.js","sourcesContent":["import React from 'react';\r\rexport const Input = (props) => {\r    const {title, errorMessage} = props;\r    return (\r        <div className=\"form-group\">\r            <label htmlFor={props.id}>{title}</label>\r            <input {...props} className=\"form-control\" />\r            {errorMessage && (\r                <div className=\"text-danger\">\r                    {errorMessage}\r                </div>\r            )}\r        </div>\r    )\r};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst loanRegex = RegExp('^[0-9]{1,10}$');\r\n\r\nexport const validateLoanAmount = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Amount is a Required Field');\r\n        return false;\r\n    }\r\n    if(!loanRegex.test(value)) {\r\n        setErrorMessage('Loan Amount needs to be a number between 1 and 10 digits');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const LoanAmountInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanAmount\",\r\n        placeholder:\"Enter Total Loan Amount\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Total Loan Amount\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst interestRateRegex = RegExp('^\\\\d{1,2}\\\\.?\\\\d{0,4}$');\r\n\r\nexport const validateInterestRate = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Interest Rate is a Required Field');\r\n        return false;\r\n    }\r\n    if(!interestRateRegex.test(value)) {\r\n        setErrorMessage('Interest Rate needs to be a decimal between 0 and 99');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const InterestRateInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanInterestRate\",\r\n        placeholder:\"Enter Loan Interest Rate\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Loan Interest Rate\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst loanLengthRegex = RegExp('^([1-9][0-9]{0,2}|1000)$');\r\n\r\nexport const validateLoanLength = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Length is a Required Field');\r\n        return false;\r\n    }\r\n    if(!loanLengthRegex.test(value)) {\r\n        setErrorMessage('Interest Rate needs to be between 1 and 1000');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const LoanLengthInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanLength\",\r\n        placeholder:\"Enter # of Loan Payments Remaining\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Loan Length Left in Months\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nexport const validatePayoffDate = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Length is a Required Field');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const PayoffDateInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"payoffDate\",\r\n        placeholder:\"Enter Loan Payoff Date\",\r\n        type:\"date\",\r\n        value,\r\n        title: \"Enter Payoff Date\",\r\n        errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {addMonths, differenceInMonths, startOfToday} from \"date-fns\";\r\n\r\nexport const createAmortizationSchedule = (loanInterestRate, loanAmount, loanLength, payOffDate) => {\r\n\r\n    // Interest & Payment Calculations\r\n    const convertedRate = (loanInterestRate * .01) / 12;\r\n    const firstInterestAmount = Math.round(((loanInterestRate * .01) / 12) * loanAmount * 100) / 100;\r\n    const convertedWithLoan = Math.pow(1 + convertedRate, loanLength);\r\n    const monthlyPayment = Math.round(Number(loanAmount / ((convertedWithLoan - 1) / (convertedRate * (convertedWithLoan)))) * 100) / 100;\r\n    const fullyPaidOffDate = addMonths(startOfToday(), loanLength);\r\n\r\n    const paymentIndex = loanLength - differenceInMonths(fullyPaidOffDate, new Date(payOffDate));\r\n\r\n    const loanTable = [];\r\n\r\n    loanTable[0] = {\r\n        startingBalance: loanAmount,\r\n        repayment: monthlyPayment,\r\n        interestPaid: firstInterestAmount,\r\n        principalPaid: (monthlyPayment - firstInterestAmount),\r\n        newBalance: loanAmount - (monthlyPayment - firstInterestAmount)\r\n    };\r\n\r\n    let currentSavedInterest = 0.00;\r\n\r\n    for (let i=1; i < loanLength; i++){\r\n        const loanBalance = loanTable[i-1].newBalance;\r\n        const interestPayment = ((loanInterestRate * .01) / 12) * loanBalance;\r\n        const roundedInterest = Math.round(interestPayment * 100) / 100;\r\n        if(i >= paymentIndex) {\r\n            currentSavedInterest += roundedInterest\r\n        }\r\n        loanTable[i] = {\r\n            startingBalance: loanTable[i-1].newBalance,\r\n            repayment: monthlyPayment,\r\n            interestPaid: roundedInterest,\r\n            principalPaid: Math.round((monthlyPayment - roundedInterest) * 100) / 100,\r\n            newBalance: i === loanLength - 1 ? 0.00 : Math.round((loanBalance - (monthlyPayment - roundedInterest)) * 100) / 100\r\n            // If last payment, set newBalance to 0.00 to finish loan\r\n        }\r\n    }\r\n\r\n    return [currentSavedInterest, loanTable, paymentIndex];\r\n};\r\n\r\nexport const AmortizationTable = (props) => {\r\n    const {amortizationSchedule, finishOnPaymentNumber, savedInterest} = props;\r\n    const numberFormat = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\r\n    const renderTableHeader = () => (\r\n        <tr id='Header'>\r\n            <th>Month</th>\r\n            <th>Starting Balance</th>\r\n            <th>Repayment</th>\r\n            <th>Interest Paid</th>\r\n            <th>Principal Paid</th>\r\n            <th>New Balance</th>\r\n        </tr>\r\n    );\r\n\r\n    const renderTableBody = () => {\r\n        return Object.keys(amortizationSchedule).map((month, index) => {\r\n            const { startingBalance, repayment, interestPaid, principalPaid, newBalance } = amortizationSchedule[month];\r\n            return (\r\n                <tr key={index} className={Number(month) >= Number(finishOnPaymentNumber) ? 'bg-success' : ''}>\r\n                    <td>{index+1}</td>\r\n                    <td>{numberFormat.format(startingBalance)}</td>\r\n                    <td>{numberFormat.format(repayment)}</td>\r\n                    <td>{numberFormat.format(interestPaid)}</td>\r\n                    <td>{numberFormat.format(principalPaid)}</td>\r\n                    <td>{numberFormat.format(newBalance)}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    };\r\n\r\n    const renderTable = () => {\r\n        return (\r\n            <table className='table table-striped table-bordered' id='months'>\r\n                <tbody>\r\n                {renderTableHeader()}\r\n                {renderTableBody()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n        {Object.keys(amortizationSchedule).length > 0 && (\r\n            <div className=\"col-12 text-center\">\r\n                <h4>Saved Interest Amount: {numberFormat.format(savedInterest)}</h4>\r\n                <h1>Amortization Schedule</h1>\r\n                {renderTable()}\r\n            </div> )\r\n        }\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\n\r\nexport const HeaderInformation = () => (\r\n    <React.Fragment>\r\n        <h1 className='col-12 text-center mt-3'>Saved Interest Calculator</h1>\r\n        <p className='col-12 text-center'>\r\n            This calculator takes in information pertaining to a specific loan, and calculates the amount of interest\r\n            you would save by paying it off early.\r\n        </p>\r\n        <p className='col-12 text-center'>\r\n            The Payoff date is the pay period you intend to fully pay off\r\n            the rest of the loan\r\n        </p>\r\n    </React.Fragment>\r\n);\r\n\r\n","import React, {useState} from \"react\";\r\nimport {format, startOfToday} from \"date-fns\";\r\nimport {LoanAmountInput, validateLoanAmount} from \"./LoanAmountInput\";\r\nimport {InterestRateInput, validateInterestRate} from \"./InterestRateInput\";\r\nimport {LoanLengthInput, validateLoanLength} from \"./LoanLengthInput\";\r\nimport {PayoffDateInput, validatePayoffDate} from \"./PayoffDateInput\";\r\nimport {AmortizationTable, createAmortizationSchedule} from \"./AmortizationTable\";\r\nimport {HeaderInformation} from \"./HeaderInformation\";\r\n\r\nexport const LoanForm = () => {\r\n    const [loanAmount, setLoanAmount] = useState();\r\n    const [loanErrorMessage, setLoanErrorMessage] = useState(undefined);\r\n\r\n    const [loanInterestRate, setLoanInterestRate] = useState();\r\n    const [interestRateErrorMessage, setInterestRateErrorMessage] = useState(undefined);\r\n\r\n    const [loanLength, setLoanLength] = useState();\r\n    const [loanLengthErrorMessage, setLoanLengthErrorMessage] = useState(undefined);\r\n\r\n    const [payoffDate, setPayoffDate] = useState(format(startOfToday(), 'yyyy-MM-dd'));\r\n    const [payoffDateErrorMessage, setPayoffDateErrorMessage] = useState(undefined);\r\n\r\n    const [finishOnPaymentNumber, setFinishOnPaymentNumber] = useState();\r\n    const [amortizationSchedule, setAmortizationSchedule] = useState({});\r\n    const [savedInterest, setSavedInterest] = useState(0.00);\r\n\r\n    const validateForm = () => {\r\n        return validateLoanAmount(loanAmount, setLoanErrorMessage) &\r\n            validateInterestRate(loanInterestRate, setInterestRateErrorMessage) &\r\n            validateLoanLength(loanLength, setLoanLengthErrorMessage) &\r\n            validatePayoffDate(payoffDate, setPayoffDateErrorMessage)\r\n    };\r\n\r\n    const onClick = () => {\r\n        if(validateForm()) {\r\n            const [currentSavedInterest, loanTable, paymentIndex] = createAmortizationSchedule(Number(loanInterestRate), Number(loanAmount), loanLength, payoffDate);\r\n            setAmortizationSchedule(loanTable);\r\n            setSavedInterest(currentSavedInterest);\r\n            setFinishOnPaymentNumber(String(paymentIndex));\r\n        }\r\n    };\r\n\r\n    const tableProps = {\r\n        amortizationSchedule,\r\n        savedInterest,\r\n        finishOnPaymentNumber\r\n    };\r\n\r\n    const loanAmountProps = {\r\n        value: loanAmount,\r\n        setValue: setLoanAmount,\r\n        errorMessage: loanErrorMessage\r\n    };\r\n\r\n    const interestRateProps = {\r\n        value: loanInterestRate,\r\n        setValue: setLoanInterestRate,\r\n        errorMessage: interestRateErrorMessage\r\n    };\r\n\r\n    const loanLengthProps = {\r\n        value: loanLength,\r\n        setValue: setLoanLength,\r\n        errorMessage: loanLengthErrorMessage\r\n    };\r\n\r\n    const payoffDateProps = {\r\n        value: payoffDate,\r\n        setValue: setPayoffDate,\r\n        errorMessage: payoffDateErrorMessage\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <HeaderInformation/>\r\n            <form role='form'>\r\n                <LoanAmountInput {...loanAmountProps} />\r\n                <InterestRateInput {...interestRateProps} />\r\n                <LoanLengthInput {...loanLengthProps} />\r\n                <PayoffDateInput {...payoffDateProps} />\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 text-center p-3\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={onClick}>Compute Saved Interest</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            <AmortizationTable {...tableProps} />\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport {LoanForm} from \"./components/LoanForm\";\n\nexport const App = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Route path={'/'} component={LoanForm} />\n        </BrowserRouter>\n    )\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}