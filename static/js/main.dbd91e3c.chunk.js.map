{"version":3,"sources":["components/AmortizationTable.js","components/Input.js","components/LoanAmountInput.js","components/InterestRateInput.js","components/LoanLengthInput.js","components/PayoffDateInput.js","App.js","serviceWorker.js","index.js"],"names":["AmortizationTable","props","amortizationSchedule","finishOnPaymentNumber","savedInterest","numberFormat","Intl","NumberFormat","style","currency","className","Object","keys","length","format","id","map","month","index","startingBalance","repayment","interestPaid","principalPaid","newBalance","key","Number","Input","title","errorMessage","loanRegex","RegExp","LoanAmountInput","value","setValue","principalProps","placeholder","type","onChange","e","target","interestRateRegex","InterestRateInput","loanLengthRegex","LoanLengthInput","PayoffDateInput","App","useState","loanAmount","setLoanAmount","undefined","loanErrorMessage","setLoanErrorMessage","loanInterestRate","setLoanInterestRate","interestRateErrorMessage","setInterestRateErrorMessage","loanLength","setLoanLength","loanLengthErrorMessage","setLoanLengthErrorMessage","startOfToday","payoffDate","setPayoffDate","payoffDateErrorMessage","setPayoffDateErrorMessage","setFinishOnPaymentNumber","setAmortizationSchedule","setSavedInterest","validateForm","setErrorMessage","test","validateInterestRate","validateLoanLength","validatePayoffDate","tableProps","loanAmountProps","interestRateProps","loanLengthProps","payoffDateProps","role","onClick","payOffDate","convertedRate","firstInterestAmount","Math","round","convertedWithLoan","pow","monthlyPayment","fullyPaidOffDate","addMonths","paymentIndex","differenceInMonths","Date","loanTable","currentSavedInterest","i","loanBalance","interestPayment","roundedInterest","createAmortizationSchedule","String","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dbd91e3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {addMonths, differenceInMonths, startOfToday} from \"date-fns\";\r\n\r\nexport const createAmortizationSchedule = (loanInterestRate, loanAmount, loanLength, payOffDate) => {\r\n\r\n    // Interest & Payment Calculations\r\n    const convertedRate = (loanInterestRate * .01) / 12;\r\n    const firstInterestAmount = Math.round(((loanInterestRate * .01) / 12) * loanAmount * 100) / 100;\r\n    const convertedWithLoan = Math.pow(1 + convertedRate, loanLength);\r\n    const monthlyPayment = Math.round(Number(loanAmount / ((convertedWithLoan - 1) / (convertedRate * (convertedWithLoan)))) * 100) / 100;\r\n    const fullyPaidOffDate = addMonths(startOfToday(), loanLength);\r\n\r\n    const paymentIndex = loanLength - differenceInMonths(fullyPaidOffDate, new Date(payOffDate));\r\n\r\n    const loanTable = [];\r\n\r\n    loanTable[0] = {\r\n        startingBalance: loanAmount,\r\n        repayment: monthlyPayment,\r\n        interestPaid: firstInterestAmount,\r\n        principalPaid: (monthlyPayment - firstInterestAmount),\r\n        newBalance: loanAmount - (monthlyPayment - firstInterestAmount)\r\n    };\r\n\r\n    let currentSavedInterest = 0.00;\r\n\r\n    for (let i=1; i < loanLength; i++){\r\n        const loanBalance = loanTable[i-1].newBalance;\r\n        const interestPayment = ((loanInterestRate * .01) / 12) * loanBalance;\r\n        const roundedInterest = Math.round(interestPayment * 100) / 100;\r\n        if(i >= paymentIndex) {\r\n            currentSavedInterest += roundedInterest\r\n        }\r\n        loanTable[i] = {\r\n            startingBalance: loanTable[i-1].newBalance,\r\n            repayment: monthlyPayment,\r\n            interestPaid: roundedInterest,\r\n            principalPaid: Math.round((monthlyPayment - roundedInterest) * 100) / 100,\r\n            newBalance: i === loanLength - 1 ? 0.00 : Math.round((loanBalance - (monthlyPayment - roundedInterest)) * 100) / 100\r\n            // If last payment, set newBalance to 0.00 to finish loan\r\n        }\r\n    }\r\n\r\n    return [currentSavedInterest, loanTable, paymentIndex];\r\n};\r\n\r\nexport const AmortizationTable = (props) => {\r\n    const {amortizationSchedule, finishOnPaymentNumber, savedInterest} = props;\r\n    const numberFormat = new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' });\r\n    const renderTableHeader = () => (\r\n        <tr id='Header'>\r\n            <th>Month</th>\r\n            <th>Starting Balance</th>\r\n            <th>Repayment</th>\r\n            <th>Interest Paid</th>\r\n            <th>Principal Paid</th>\r\n            <th>New Balance</th>\r\n        </tr>\r\n    );\r\n\r\n    const renderTableBody = () => {\r\n        return Object.keys(amortizationSchedule).map((month, index) => {\r\n            const { startingBalance, repayment, interestPaid, principalPaid, newBalance } = amortizationSchedule[month];\r\n            return (\r\n                <tr key={index} className={Number(month) >= Number(finishOnPaymentNumber) ? 'finish-month' : ''}>\r\n                    <td>{index+1}</td>\r\n                    <td>{numberFormat.format(startingBalance)}</td>\r\n                    <td>{numberFormat.format(repayment)}</td>\r\n                    <td>{numberFormat.format(interestPaid)}</td>\r\n                    <td>{numberFormat.format(principalPaid)}</td>\r\n                    <td>{numberFormat.format(newBalance)}</td>\r\n                </tr>\r\n            )\r\n        });\r\n    };\r\n\r\n    const renderTable = () => {\r\n        return (\r\n            <table className='table' id='months'>\r\n                <tbody>\r\n                {renderTableHeader()}\r\n                {renderTableBody()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n        {Object.keys(amortizationSchedule).length > 0 && (\r\n            <div className=\"col-12 text-center\">\r\n                <h3>Saved Interest Amount: {numberFormat.format(savedInterest)}</h3>\r\n                <h1>Amortization Schedule</h1>\r\n                {renderTable()}\r\n            </div> )\r\n        }\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\rexport const Input = (props) => {\r    const {title, errorMessage} = props;\r    return (\r        <div className=\"form-group\">\r            <label htmlFor={props.id}>{title}</label>\r            <input {...props} className=\"form-control\" />\r            {errorMessage && (\r                <div className=\"text-danger\">\r                    {errorMessage}\r                </div>\r            )}\r        </div>\r    )\r};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst loanRegex = RegExp('^[0-9]{1,10}$');\r\n\r\nexport const validateLoanAmount = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Amount is a Required Field');\r\n        return false;\r\n    }\r\n    if(!loanRegex.test(value)) {\r\n        setErrorMessage('Loan Amount needs to be a number between 1 and 10 digits');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const LoanAmountInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanAmount\",\r\n        placeholder:\"Enter Total Loan Amount\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Total Loan Amount\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst interestRateRegex = RegExp('^\\\\d{1,2}\\\\.?\\\\d{0,4}$');\r\n\r\nexport const validateInterestRate = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Interest Rate is a Required Field');\r\n        return false;\r\n    }\r\n    if(!interestRateRegex.test(value)) {\r\n        setErrorMessage('Interest Rate needs to be a decimal between 0 and 99');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const InterestRateInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanInterestRate\",\r\n        placeholder:\"Enter Loan Interest Rate\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Loan Interest Rate\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nconst loanLengthRegex = RegExp('^([1-9][0-9]{0,2}|1000)$');\r\n\r\nexport const validateLoanLength = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Length is a Required Field');\r\n        return false;\r\n    }\r\n    if(!loanLengthRegex.test(value)) {\r\n        setErrorMessage('Interest Rate needs to be between 1 and 1000');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const LoanLengthInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"loanLength\",\r\n        placeholder:\"Enter # of Loan Payments Remaining\",\r\n        type:\"string\",\r\n        value,\r\n        title: \"Loan Length Left in Months\",\r\n        errorMessage: errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React from 'react';\r\nimport {Input} from \"./Input\";\r\n\r\nexport const validatePayoffDate = (value, setErrorMessage) => {\r\n    if(!value) {\r\n        setErrorMessage('Loan Length is a Required Field');\r\n        return false;\r\n    }\r\n    setErrorMessage(undefined);\r\n    return true;\r\n};\r\n\r\nexport const PayoffDateInput = (props) => {\r\n    const {value, setValue, errorMessage} = props;\r\n    const principalProps = {\r\n        id:\"payoffDate\",\r\n        placeholder:\"Enter Loan Payoff Date\",\r\n        type:\"date\",\r\n        value,\r\n        title: \"Enter Payoff Date\",\r\n        errorMessage,\r\n        onChange: e => setValue(e.target.value)\r\n    };\r\n    return (<Input {...principalProps} />)\r\n};","import React, {useState} from 'react';\nimport {startOfToday, format} from 'date-fns'\nimport {AmortizationTable, createAmortizationSchedule} from \"./components/AmortizationTable\";\nimport {LoanAmountInput, validateLoanAmount} from \"./components/LoanAmountInput\";\nimport {InterestRateInput, validateInterestRate} from \"./components/InterestRateInput\";\nimport {LoanLengthInput, validateLoanLength} from \"./components/LoanLengthInput\";\nimport {PayoffDateInput, validatePayoffDate} from \"./components/PayoffDateInput\";\n\nexport const App = () => {\n\n    const [loanAmount, setLoanAmount] = useState(30000);\n    const [loanErrorMessage, setLoanErrorMessage] = useState(undefined);\n\n    const [loanInterestRate, setLoanInterestRate] = useState(6.45);\n    const [interestRateErrorMessage, setInterestRateErrorMessage] = useState(undefined);\n\n    const [loanLength, setLoanLength] = useState(24);\n    const [loanLengthErrorMessage, setLoanLengthErrorMessage] = useState(undefined);\n\n    const [payoffDate, setPayoffDate] = useState(format(startOfToday(), 'yyyy-MM-dd'));\n    const [payoffDateErrorMessage, setPayoffDateErrorMessage] = useState(undefined);\n\n    const [finishOnPaymentNumber, setFinishOnPaymentNumber] = useState();\n    const [amortizationSchedule, setAmortizationSchedule] = useState({});\n    const [savedInterest, setSavedInterest] = useState(0.00);\n\n    const validateForm = () => {\n        return validateLoanAmount(loanAmount, setLoanErrorMessage) &\n            validateInterestRate(loanInterestRate, setInterestRateErrorMessage) &\n            validateLoanLength(loanLength, setLoanLengthErrorMessage) &\n            validatePayoffDate(payoffDate, setPayoffDateErrorMessage)\n    };\n\n    const onClick = () => {\n        if(validateForm()) {\n            const [currentSavedInterest, loanTable, paymentIndex] = createAmortizationSchedule(Number(loanInterestRate), Number(loanAmount), loanLength, payoffDate);\n            setAmortizationSchedule(loanTable);\n            setSavedInterest(currentSavedInterest);\n            setFinishOnPaymentNumber(String(paymentIndex));\n        }\n    };\n\n    const tableProps = {\n        amortizationSchedule,\n        savedInterest,\n        finishOnPaymentNumber\n    };\n\n    const loanAmountProps = {\n        value: loanAmount,\n        setValue: setLoanAmount,\n        errorMessage: loanErrorMessage\n    };\n\n    const interestRateProps = {\n        value: loanInterestRate,\n        setValue: setLoanInterestRate,\n        errorMessage: interestRateErrorMessage\n    };\n\n    const loanLengthProps = {\n        value: loanLength,\n        setValue: setLoanLength,\n        errorMessage: loanLengthErrorMessage\n    };\n\n    const payoffDateProps = {\n        value: payoffDate,\n        setValue: setPayoffDate,\n        errorMessage: payoffDateErrorMessage\n    };\n\n    return (\n    <div className=\"container\">\n        <form role='form'>\n          <LoanAmountInput {...loanAmountProps} />\n          <InterestRateInput {...interestRateProps} />\n          <LoanLengthInput {...loanLengthProps} />\n          <PayoffDateInput {...payoffDateProps} />\n          <div className=\"row\">\n            <div className=\"col-12 text-center\">\n              <button type=\"button\" className=\"btn btn-primary\" onClick={onClick}>Compute Saved Interest</button>\n            </div>\n          </div>\n        </form>\n        <AmortizationTable {...tableProps} />\n    </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}